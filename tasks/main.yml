---
- name: "install Ansible dependencies"
  package:
    name:
      - python3
      - python3-pip
      - libselinux-python
      - libsemanage-python
    state: present
  become: true
  when: APP_USE_PODMAN and ansible_pkg_mgr != 'homebrew' and APP_PYTHON == '/usr/bin/python'
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
- name: "install podman dependency"
  package:
    name:
      - podman
    state: present
  become: true
  when: APP_USE_PODMAN and ansible_pkg_mgr != 'homebrew' and APP_PYTHON == '/usr/bin/python3'
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
- name: Set container_manage_cgroup flag on to run podman containers as systemd services and keep it persistent across reboots
  ansible.posix.seboolean:
    name: container_manage_cgroup
    state: true
    persistent: true
  become: true
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
  when: APP_USE_PODMAN
- name: Check if javac command exists
  stat:
    path: /usr/bin/javac
  register: JAVAC_EXISTS
- name: Install {{ APP_NAME }} dependencies. 
  package:
    name: [git,java-1.8.0-openjdk]
    state: present
  become: yes
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
  when: ansible_pkg_mgr != 'homebrew'
- name: Install {{ APP_NAME }} dependencies. 
  package:
    name: [openjdk,gnu-tar]
    state: present
  when: ansible_pkg_mgr == 'homebrew'
- name: Link openjdk to Library
  file:
    src: /usr/local/opt/openjdk/libexec/openjdk.jdk
    dest: /Library/Java/JavaVirtualMachines/openjdk.jdk
    state: link
  become: true
  when: ansible_pkg_mgr == 'homebrew'
- name: Check for the {{ APP_NAME }} download
  stat:
    path: "{{ APP_DOWNLOAD_DEST }}"
  register: APP_DOWNLOAD
- name: Download the Solr binary
  get_url:
    url: "{{ APP_DOWNLOAD_URL }}"
    dest: "{{ APP_DOWNLOAD_DEST }}"
  when: not APP_DOWNLOAD.stat.exists
- name: Create the computate source directory {{ COMPUTATE_SRC }}
  file:
    name: "{{ COMPUTATE_SRC }}"
    state: directory
    owner: "{{ USER_NAME }}"
  become: true
- name: Check for the computate pom.xml
  stat:
    path: "{{ COMPUTATE_SRC }}/pom.xml"
  register: computate_pom
- name: Clone the computate source code
  git:
    repo: "{{ COMPUTATE_REPO }}"
    dest: "{{ COMPUTATE_SRC }}"
  when: not computate_pom.stat.exists
- name: Create the {{ APP_NAME }} install directory {{ APP_OPT }}. 
  file:
    name: "{{ APP_OPT }}"
    state: directory
    owner: "{{ USER_NAME }}"
  become: true
- name: Install {{ APP_NAME }} into the {{ APP_OPT }} install directory. 
  unarchive:
    src: "{{ APP_DOWNLOAD_DEST }}"
    dest: "{{ APP_OPT }}"
    remote_src: true
    extra_opts: [--strip-components=1]
- name: Create the {{ APP_NAME }} data directory {{ APP_DATA }}. 
  file:
    name: "{{ APP_DATA }}"
    state: directory
    owner: "{{ APP_USER }}"
    mode: 0777
  become: true
- name: set SELinux permissions on {{ APP_DATA }}
  sefcontext:
    target: "{{ APP_DATA }}"
    setype: container_file_t
  become: true
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
  when: APP_USE_PODMAN
- name: reload SELinux policy to ensure that {{ APP_NAME }} is executable
  command: "restorecon -irv {{ APP_DATA }}"
  become: true
  when: APP_USE_PODMAN
- name: Copy the solr.xml to the {{ APP_NAME }} directory {{ APP_DATA }}. 
  copy:
    src: "{{ APP_OPT }}/server/solr/solr.xml"
    dest: "{{ APP_OPT }}/solr.xml"
    remote_src: true
  become: true
- name: Delete the example directory {{ APP_OPT }}/example. 
  file:
    name: "{{ APP_OPT }}/example"
    state: absent
- name: Link the computate configset into {{ APP_NAME }}. 
  file:
    src: "{{ COMPUTATE_SRC }}/config/solr/server/solr/configsets/computate"
    dest: "{{ APP_OPT }}/server/solr/configsets/computate"
    state: link
- name: Find the {{ APP_NAME }} binaries in {{ APP_OPT }}/bin. 
  find:
    paths: "{{ APP_OPT }}/bin"
    recurse: no
  register: BIN_FILES
- name: Make the {{ APP_NAME }} binaries executable in {{ APP_OPT }}/bin. 
  file:
    dest: "{{item.path}}"
    mode: a+x
  with_items:
    - "{{BIN_FILES.files}}"
- name: Find the {{ APP_NAME }} cloud scripts in {{ APP_OPT }}/server/scripts/cloud-scripts. 
  find:
    paths: "{{ APP_OPT }}/server/scripts/cloud-scripts"
    recurse: no
  register: CLOUD_SCRIPTS
- name: Make the {{ APP_NAME }} cloud scripts executable in {{ APP_OPT }}/server/scripts/cloud-scripts. 
  file:
    dest: "{{item.path}}"
    mode: a+x
  with_items:
    - "{{CLOUD_SCRIPTS.files}}"
- name: Create the {{ APP_NAME }} systemd service {{ APP_SYSTEMD }}. 
  template:
    src: solr_service.j2
    dest: "{{ APP_SYSTEMD }}"
  become: true
  when: ansible_pkg_mgr != 'homebrew'
- name: Reload the services. 
  systemd:
    daemon_reload: true
  become: true
  when: ansible_pkg_mgr != 'homebrew'
- name: Start and enable the {{ APP_NAME }} service. 
  service:
    name: "{{ APP_SERVICE }}"
    enabled: true
    state: restarted
  become: true
  when: ansible_pkg_mgr != 'homebrew'
- name: Create the {{ APP_NAME }} launchd service.
  template:
    src: solr_launchd_service.j2
    dest: "~/Library/LaunchAgents/org.solr.plist"
  when: ansible_pkg_mgr == 'homebrew'
- name: Load the {{ APP_NAME }} launchd service.
  shell: launchctl load ~/Library/LaunchAgents/org.solr.plist
  when: ansible_pkg_mgr == 'homebrew'
- name: Start the {{ APP_NAME }} launchd service.
  shell: launchctl start org.solr
  when: ansible_pkg_mgr == 'homebrew'
  changed_when: false

- name: "hold until Solr is up and running at http://localhost:{{ APP_PORT }}"
  wait_for:
    host: "localhost"
    port: "{{ APP_PORT }}"

- name: Check for existing solr configset computate
  shell: "{{ APP_OPT }}/server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:{{ ZOOKEEPER_PORT }} -cmd ls /configs/computate"
  ignore_errors: true
  register: APP_CONFIGSET_EXISTS
  changed_when: false
- name: Upload computate configset to zookeeper
  shell: "{{ APP_OPT }}/bin/solr zk upconfig -n computate -d {{ APP_OPT }}/server/solr/configsets/computate -z {{ ZOOKEEPER_HOST_NAME }}:{{ ZOOKEEPER_PORT }}"
  when: APP_CONFIGSET_EXISTS.rc != 0

#- name: Setup the solr security configuration
#  template:
#    src: computate_solr_security.json.j2
#    dest: "{{ APP_OPT }}/server/solr/security.json"
#- name: Upload security configuration to zookeeper
#  shell: "{{ APP_OPT }}/server/scripts/cloud-scripts/zkcli.sh -z {{ ZOOKEEPER_HOST_NAME }}:{{ ZOOKEEPER_PORT }} -cmd putfile /security.json {{ APP_OPT }}/server/solr/security.json"
#
#- name: Create computate collection in solr
#  shell: "(APP_AUTH_TYPE=basic APP_AUTHENTICATION_OPTS='-Dbasicauth={{ APP_SOLRJ_USER }}:{{ APP_SOLRJ_PASSWORD }}' {{ APP_OPT }}/bin/solr create_collection -c computate -n computate)"
- name: Check for existing solr collection computate
  shell: "{{ APP_OPT }}/server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:{{ ZOOKEEPER_PORT }} -cmd ls /collections/computate"
  ignore_errors: true
  register: APP_COLLECTION_EXISTS
  changed_when: false
- name: Create computate collection in solr
  shell: "{{ APP_OPT }}/bin/solr create -c computate -n computate"
  when: APP_COLLECTION_EXISTS.rc != 0
